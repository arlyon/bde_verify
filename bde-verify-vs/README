Prerequisites for building BDE Verify on Windows:
1) Git Bash           <https://git-scm.com/download/win>
2) CMake              <https://cmake.org/download>
3) NSIS               <https://sourceforge.net/project/nsis/files>
4) Visual Studio

Prerequisites for running the command-line BDE Verify on Windows:
1) Perl               <http://www.activestate.com/activeperl/downloads>

Installing NSIS:

The standard version of NSIS has a 1K limit on string size, and installers
built using it will fail to update PATH if its length exceeds that size.
After installing NSIS (as of this writing, the current version is
nsis-3.01-setup.exe found at
<https://sourceforge.net/projects/nsis/files/NSIS%203/3.01/>), also download
nsis-3.01-strlen_8192.zip and extract those files on top of the ones in the
NSIS installation.

Prepare a development installation of LLVM/Clang 4.0:

(If you already have a copy of the LLVM-4.0-x-win32.exe installer from a
previous build you can use that instead of building a new one.)

This build will require a great deal of disk space; also make sure that your
TEMPDIR/TEMP/TMP environment variables point to a directory on a filesystem
with plenty of space, lest building the installer fail with a mysterious
message.  The installation will be built in "MinSizeRel" mode.  (You may try
other modes, but the NSIS installer fails at around 2GB.  In particular, Debug
mode is unlikely to work.)

First, obtain the sources; in a Git Bash shell, do

    export SRC=/path/to/source/directory
    mkdir -p $SRC
    export BLD=/path/to/build/directory
    mkdir -p $BLD

    export GL=http://github.com/llvm-mirror
    cd $SRC
    git clone -b release_40 $GL/llvm.git
    cd llvm/tools
    git clone -b release_40 $GL/clang.git
    cd clang/tools
    git clone -b release_40 $GL/clang-tools-extra.git extra

Then build an installation package for llvm/clang;
    export CLSRC=$SRC/llvm
    export CLBLD=$BLD/llvm
    mkdir -p $CLBLD
    cd $CLBLD
    cmake $CLSRC
    cmake --build . --target package --config MinSizeRel

This will produce an executable LLVM-4.0.?-win32.exe.

Start a 'cmd' shell and run the executable to install the development
LLVM/Clang.  When asked by the installer, have it update the path, either for
all users or for the current user.  Exit the 'cmd' shell.

Now get and build BDE Verify:
    export BVSRC=$SRC/bde_verify
    cd $SRC
    git clone http://github.com/bloomberg/bde_verify.git
    export BVBLD=$BLD/bde_verify
    mkdir -p $BVBLD
    cd $BVBLD
    cmake $BVSRC
    cmake --build . --target package --config MinSizeRel

This will produce an executable 'bde_verify-x.y.z-win32.exe'.

Start a 'cmd' shell and run the executable to install BDE Verify, then exit the
'cmd' shell.  The driver script on Windows is bde_verify.pl, taking generally
the same arguments as the Unix bde_verify driver script.  See
<http://bloomberg.github.io/bde_verify/bde_verify_build/html/> for full
documentation.

Then build the Visual Studio plugin:  From Visual Studio, open the solution
$BVSRC/bde-verify-vs/BdeVerify.sln and build it, producing
$BVSRC/bde-verify-vs/BdeVerify/bin/Release/BdeVerify.vsix.
Run that file to install the BDE Verify extension into Visual Studio.

Once installed, the TOOLS menu will have a BDE Verify entry and there will be a
property page for BDE Verify under TOOLS/Options where some configuration may
be set.  Selecting TOOLS/BDE Verify to run on a C++ file that's part of a
project will run BDE Verify on that file and output the warnings to a message
window where they can be clicked individually to take you to their
corresponding source lines.  Note that BDE Verify runs asynchronously, so the
message window will gradually fill with warnings and the Visual Studio GUI
will not hang while waiting.  A "BDE Verify done" message will be posted once
processing is complete.  Messages from multiple runs on different files may be
displayed simultaneously.  Rerunning BDE Verify on a file replaces just the
messages for that file.
