In file included from csabbg_allocatorforward.t.cpp:3:
./csabbg_allocatorforward.t.hpp:34:15: warning: AT02: Class 'allocatorforward_alloc_used' uses allocators but does not have an allocator trait
        class allocatorforward_alloc_used;
              ^
./csabbg_allocatorforward.t.hpp:12:1: note: AT02: Header needed for allocator trait
#include <bslmf_nestedtraitdeclaration.h>

#ifndef INCLUDED_CSASCM_VERSION
^
./csabbg_allocatorforward.t.hpp:9:1: note: AT02: Header needed for allocator trait
#include <bslma_usesbslmaallocator.h>

#ifndef INCLUDED_BSLMF_INTEGRALCONSTANT
^
./csabbg_allocatorforward.t.hpp:55:1: note: AT02: Allocator trait for class allocatorforward_alloc_used

  public:
    // TRAITS
    BSLMF_NESTED_TRAIT_DECLARATION(allocatorforward_alloc_used, bslma::UsesBslmaAllocator);

};
^
./csabbg_allocatorforward.t.hpp:34:15: warning: AL01: Class 'allocatorforward_alloc_used' needs allocator() method
        class allocatorforward_alloc_used;
              ^
./csabbg_allocatorforward.t.hpp:55:1: note: AL01: Allocator method definition for class allocatorforward_alloc_used

  public:
    // PUBLIC ACCESSORS
    bslma::Allocator *allocator() const;

};
^
./csabbg_allocatorforward.t.hpp:34:15: warning: AP02: Class 'allocatorforward_alloc_used' needs d_allocator_p member
        class allocatorforward_alloc_used;
              ^
./csabbg_allocatorforward.t.hpp:55:1: note: AP02: Allocator member declaration for class allocatorforward_alloc_used

  private:
    // PRIVATE DATA
    bslma::Allocator *d_allocator_p;

};
^
./csabbg_allocatorforward.t.hpp:47:27: warning: AC02: Implicit copy constructor is not allocator-aware
class bde_verify::csabbg::allocatorforward_alloc_used
                          ^
./csabbg_allocatorforward.t.hpp:55:1: note: AC02: Version with allocator

  public:
    // PUBLIC CREATORS
    allocatorforward_alloc_used(const allocatorforward_alloc_used& original, bslma::Allocator *basicAllocator = 0);

};
^
csabbg_allocatorforward.t.cpp:15:19: warning: AT02: Class 'test' uses allocators but does not have an allocator trait
            class test:
                  ^
csabbg_allocatorforward.t.cpp:29:13: note: AT02: Allocator trait for class test

              public:
                // TRAITS
                BSLMF_NESTED_TRAIT_DECLARATION(test, bslma::UsesBslmaAllocator);
            
            };
            ^
csabbg_allocatorforward.t.cpp:15:19: warning: AL01: Class 'test' needs allocator() method
            class test:
                  ^
csabbg_allocatorforward.t.cpp:29:13: note: AL01: Allocator method definition for class test

              public:
                // PUBLIC ACCESSORS
                bslma::Allocator *allocator() const;
            
            };
            ^
csabbg_allocatorforward.t.cpp:15:19: warning: AC02: Implicit copy constructor is not allocator-aware
            class test:
                  ^
csabbg_allocatorforward.t.cpp:29:13: note: AC02: Version with allocator

              public:
                // PUBLIC CREATORS
                test(const test& original, bslma::Allocator *basicAllocator = 0);
            
            };
            ^
csabbg_allocatorforward.t.cpp:45:5: warning: MA01: Allocator not passed to base class bde_verify::csabbg::allocatorforward_alloc_used
    allocatorforward_alloc_used(i),
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
csabbg_allocatorforward.t.cpp:46:5: warning: MA02: Allocator not passed to member used0_
    used0_(i),
    ^~~~~~~~~
csabbg_allocatorforward.t.cpp:44:70: warning: MA02: Allocator not passed to member used2_
bde_verify::csabbg::test::test(int i, BloombergLP::bslma::Allocator* alloc):
                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~
csabbg_allocatorforward.t.cpp:70:5: warning: MA02: Allocator not passed to member used0_
    used0_(bde_verify::csabbg::dummy(alloc)),
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
csabbg_allocatorforward.t.cpp:85:20: warning: AT02: Class 'tbase' uses allocators but does not have an allocator trait
            struct tbase
                   ^
csabbg_allocatorforward.t.cpp:92:13: note: AT02: Allocator trait for class tbase

              public:
                // TRAITS
                BSLMF_NESTED_TRAIT_DECLARATION(tbase, bslma::UsesBslmaAllocator);
            
            };
            ^
csabbg_allocatorforward.t.cpp:85:20: warning: AL01: Class 'tbase' needs allocator() method
            struct tbase
                   ^
csabbg_allocatorforward.t.cpp:92:13: note: AL01: Allocator method definition for class tbase

              public:
                // PUBLIC ACCESSORS
                bslma::Allocator *allocator() const;
            
            };
            ^
csabbg_allocatorforward.t.cpp:88:62: warning: MA02: Allocator not passed to member used0_
                explicit tbase(BloombergLP::bslma::Allocator*);
                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
csabbg_allocatorforward.t.cpp:85:20: warning: AC02: Implicit copy constructor is not allocator-aware
            struct tbase
                   ^
csabbg_allocatorforward.t.cpp:92:13: note: AC02: Version with allocator

              public:
                // PUBLIC CREATORS
                tbase(const tbase& original, bslma::Allocator *basicAllocator = 0);
            
            };
            ^
csabbg_allocatorforward.t.cpp:130:24: warning: AT02: Class 'M' uses allocators but does not have an allocator trait
                struct M { M(BloombergLP::bslma::Allocator*) {} };
                       ^
csabbg_allocatorforward.t.cpp:130:65: note: AT02: Allocator trait for class M

                  public:
                    // TRAITS
                    BSLMF_NESTED_TRAIT_DECLARATION(M, bslma::UsesBslmaAllocator);
                
                struct M { M(BloombergLP::bslma::Allocator*) {} };
                                                                ^
csabbg_allocatorforward.t.cpp:130:24: warning: AL01: Class 'M' needs allocator() method
                struct M { M(BloombergLP::bslma::Allocator*) {} };
                       ^
csabbg_allocatorforward.t.cpp:130:65: note: AL01: Allocator method definition for class M

                  public:
                    // PUBLIC ACCESSORS
                    bslma::Allocator *allocator() const;
                
                struct M { M(BloombergLP::bslma::Allocator*) {} };
                                                                ^
csabbg_allocatorforward.t.cpp:130:24: warning: AP02: Class 'M' needs d_allocator_p member
                struct M { M(BloombergLP::bslma::Allocator*) {} };
                       ^
csabbg_allocatorforward.t.cpp:130:65: note: AP02: Allocator member declaration for class M

                  private:
                    // PRIVATE DATA
                    bslma::Allocator *d_allocator_p;
                
                struct M { M(BloombergLP::bslma::Allocator*) {} };
                                                                ^
csabbg_allocatorforward.t.cpp:132:24: warning: AT02: Class 'S' uses allocators but does not have an allocator trait
                struct S { S(const T*) {} S(const T*, const A&) {} };
                       ^
csabbg_allocatorforward.t.cpp:132:68: note: AT02: Allocator trait for class S

                  public:
                    // TRAITS
                    BSLMF_NESTED_TRAIT_DECLARATION(S, bslma::UsesBslmaAllocator);
                
                struct S { S(const T*) {} S(const T*, const A&) {} };
                                                                   ^
csabbg_allocatorforward.t.cpp:132:24: warning: AL01: Class 'S' needs allocator() method
                struct S { S(const T*) {} S(const T*, const A&) {} };
                       ^
csabbg_allocatorforward.t.cpp:132:68: note: AL01: Allocator method definition for class S

                  public:
                    // PUBLIC ACCESSORS
                    bslma::Allocator *allocator() const;
                
                struct S { S(const T*) {} S(const T*, const A&) {} };
                                                                   ^
csabbg_allocatorforward.t.cpp:132:24: warning: AP02: Class 'S' needs d_allocator_p member
                struct S { S(const T*) {} S(const T*, const A&) {} };
                       ^
csabbg_allocatorforward.t.cpp:132:68: note: AP02: Allocator member declaration for class S

                  private:
                    // PRIVATE DATA
                    bslma::Allocator *d_allocator_p;
                
                struct S { S(const T*) {} S(const T*, const A&) {} };
                                                                   ^
csabbg_allocatorforward.t.cpp:132:24: warning: AC02: Implicit copy constructor is not allocator-aware
                struct S { S(const T*) {} S(const T*, const A&) {} };
                       ^
csabbg_allocatorforward.t.cpp:132:68: note: AC02: Version with allocator

                  public:
                    // PUBLIC CREATORS
                    S(const S& original, bslma::Allocator *basicAllocator = 0);
                
                struct S { S(const T*) {} S(const T*, const A&) {} };
                                                                   ^
csabbg_allocatorforward.t.cpp:136:53: warning: MA02: Allocator not passed to member s
                C(BloombergLP::bslma::Allocator*) : s("") { }
                                                    ^~~~~
csabbg_allocatorforward.t.cpp:134:20: warning: AT02: Class 'C' uses allocators but does not have an allocator trait
            struct C {
                   ^
csabbg_allocatorforward.t.cpp:137:13: note: AT02: Allocator trait for class C

              public:
                // TRAITS
                BSLMF_NESTED_TRAIT_DECLARATION(C, bslma::UsesBslmaAllocator);
            
            };
            ^
csabbg_allocatorforward.t.cpp:134:20: warning: AL01: Class 'C' needs allocator() method
            struct C {
                   ^
csabbg_allocatorforward.t.cpp:137:13: note: AL01: Allocator method definition for class C

              public:
                // PUBLIC ACCESSORS
                bslma::Allocator *allocator() const;
            
            };
            ^
csabbg_allocatorforward.t.cpp:148:16: warning: AT02: Class 'not_alloc' uses allocators but does not have an allocator trait
        struct not_alloc {
               ^
csabbg_allocatorforward.t.cpp:150:9: note: AT02: Allocator trait for class not_alloc

          public:
            // TRAITS
            BSLMF_NESTED_TRAIT_DECLARATION(not_alloc, bslma::UsesBslmaAllocator);
        
        };
        ^
csabbg_allocatorforward.t.cpp:148:16: warning: AL01: Class 'not_alloc' needs allocator() method
        struct not_alloc {
               ^
csabbg_allocatorforward.t.cpp:150:9: note: AL01: Allocator method definition for class not_alloc

          public:
            // PUBLIC ACCESSORS
            bslma::Allocator *allocator() const;
        
        };
        ^
csabbg_allocatorforward.t.cpp:148:16: warning: AP02: Class 'not_alloc' needs d_allocator_p member
        struct not_alloc {
               ^
csabbg_allocatorforward.t.cpp:150:9: note: AP02: Allocator member declaration for class not_alloc

          private:
            // PRIVATE DATA
            bslma::Allocator *d_allocator_p;
        
        };
        ^
csabbg_allocatorforward.t.cpp:148:16: warning: AC02: Implicit copy constructor is not allocator-aware
        struct not_alloc {
               ^
csabbg_allocatorforward.t.cpp:150:9: note: AC02: Version with allocator

          public:
            // PUBLIC CREATORS
            not_alloc(const not_alloc& original, bslma::Allocator *basicAllocator = 0);
        
        };
        ^
csabbg_allocatorforward.t.cpp:154:15: warning: MA02: Allocator not passed to member member
            : member(na) { }
              ^~~~~~~~~~
csabbg_allocatorforward.t.cpp:151:16: warning: AL01: Class 'object' needs allocator() method
        struct object {
               ^
csabbg_allocatorforward.t.cpp:155:9: note: AL01: Allocator method definition for class object

          public:
            // PUBLIC ACCESSORS
            bslma::Allocator *allocator() const;
        
        };
        ^
csabbg_allocatorforward.t.cpp:151:16: warning: AC02: Implicit copy constructor is not allocator-aware
        struct object {
               ^
csabbg_allocatorforward.t.cpp:155:9: note: AC02: Version with allocator

          public:
            // PUBLIC CREATORS
            object(const object& original, bslma::Allocator *basicAllocator = 0);
        
        };
        ^
csabbg_allocatorforward.t.cpp:201:8: warning: AL01: Class 'alloc_a' needs allocator() method
struct alloc_a {
       ^
csabbg_allocatorforward.t.cpp:204:1: note: AL01: Allocator method definition for class alloc_a

  public:
    // PUBLIC ACCESSORS
    bslma::Allocator *allocator() const;

};
^
csabbg_allocatorforward.t.cpp:201:8: warning: AP02: Class 'alloc_a' needs d_allocator_p member
struct alloc_a {
       ^
csabbg_allocatorforward.t.cpp:204:1: note: AP02: Allocator member declaration for class alloc_a

  private:
    // PRIVATE DATA
    bslma::Allocator *d_allocator_p;

};
^
csabbg_allocatorforward.t.cpp:201:8: warning: AC02: Implicit copy constructor is not allocator-aware
struct alloc_a {
       ^
csabbg_allocatorforward.t.cpp:204:1: note: AC02: Version with allocator

  public:
    // PUBLIC CREATORS
    alloc_a(const alloc_a& original, bslma::Allocator *basicAllocator = 0);

};
^
csabbg_allocatorforward.t.cpp:206:8: warning: AL01: Class 'alloc_b' needs allocator() method
struct alloc_b {
       ^
csabbg_allocatorforward.t.cpp:209:1: note: AL01: Allocator method definition for class alloc_b

  public:
    // PUBLIC ACCESSORS
    bslma::Allocator *allocator() const;

};
^
csabbg_allocatorforward.t.cpp:206:8: warning: AP02: Class 'alloc_b' needs d_allocator_p member
struct alloc_b {
       ^
csabbg_allocatorforward.t.cpp:209:1: note: AP02: Allocator member declaration for class alloc_b

  private:
    // PRIVATE DATA
    bslma::Allocator *d_allocator_p;

};
^
csabbg_allocatorforward.t.cpp:211:8: warning: AL01: Class 'alloc_c' needs allocator() method
struct alloc_c {
       ^
csabbg_allocatorforward.t.cpp:213:1: note: AL01: Allocator method definition for class alloc_c

  public:
    // PUBLIC ACCESSORS
    bslma::Allocator *allocator() const;

};
^
csabbg_allocatorforward.t.cpp:211:8: warning: AP02: Class 'alloc_c' needs d_allocator_p member
struct alloc_c {
       ^
csabbg_allocatorforward.t.cpp:213:1: note: AP02: Allocator member declaration for class alloc_c

  private:
    // PRIVATE DATA
    bslma::Allocator *d_allocator_p;

};
^
csabbg_allocatorforward.t.cpp:215:8: warning: AT02: Class 'alloc_d' uses allocators but does not have an allocator trait
struct alloc_d {
       ^
csabbg_allocatorforward.t.cpp:217:1: note: AT02: Allocator trait for class alloc_d

  public:
    // TRAITS
    BSLMF_NESTED_TRAIT_DECLARATION(alloc_d, bslma::UsesBslmaAllocator);

};
^
csabbg_allocatorforward.t.cpp:215:8: warning: AL01: Class 'alloc_d' needs allocator() method
struct alloc_d {
       ^
csabbg_allocatorforward.t.cpp:217:1: note: AL01: Allocator method definition for class alloc_d

  public:
    // PUBLIC ACCESSORS
    bslma::Allocator *allocator() const;

};
^
csabbg_allocatorforward.t.cpp:215:8: warning: AP02: Class 'alloc_d' needs d_allocator_p member
struct alloc_d {
       ^
csabbg_allocatorforward.t.cpp:217:1: note: AP02: Allocator member declaration for class alloc_d

  private:
    // PRIVATE DATA
    bslma::Allocator *d_allocator_p;

};
^
csabbg_allocatorforward.t.cpp:219:8: warning: AL01: Class 'alloc_e' needs allocator() method
struct alloc_e {
       ^
csabbg_allocatorforward.t.cpp:222:1: note: AL01: Allocator method definition for class alloc_e

  public:
    // PUBLIC ACCESSORS
    bslma::Allocator *allocator() const;

};
^
csabbg_allocatorforward.t.cpp:219:8: warning: AP02: Class 'alloc_e' needs d_allocator_p member
struct alloc_e {
       ^
csabbg_allocatorforward.t.cpp:222:1: note: AP02: Allocator member declaration for class alloc_e

  private:
    // PRIVATE DATA
    bslma::Allocator *d_allocator_p;

};
^
csabbg_allocatorforward.t.cpp:230:8: warning: AL01: Class 'alloc_g' needs allocator() method
struct alloc_g {
       ^
csabbg_allocatorforward.t.cpp:232:1: note: AL01: Allocator method definition for class alloc_g

  public:
    // PUBLIC ACCESSORS
    bslma::Allocator *allocator() const;

};
^
csabbg_allocatorforward.t.cpp:230:8: warning: AP02: Class 'alloc_g' needs d_allocator_p member
struct alloc_g {
       ^
csabbg_allocatorforward.t.cpp:232:1: note: AP02: Allocator member declaration for class alloc_g

  private:
    // PRIVATE DATA
    bslma::Allocator *d_allocator_p;

};
^
csabbg_allocatorforward.t.cpp:240:8: warning: AL01: Class 'alloc_i' needs allocator() method
struct alloc_i {
       ^
csabbg_allocatorforward.t.cpp:243:1: note: AL01: Allocator method definition for class alloc_i

  public:
    // PUBLIC ACCESSORS
    bslma::Allocator *allocator() const;

};
^
csabbg_allocatorforward.t.cpp:240:8: warning: AP02: Class 'alloc_i' needs d_allocator_p member
struct alloc_i {
       ^
csabbg_allocatorforward.t.cpp:243:1: note: AP02: Allocator member declaration for class alloc_i

  private:
    // PRIVATE DATA
    bslma::Allocator *d_allocator_p;

};
^
csabbg_allocatorforward.t.cpp:246:8: warning: AL01: Class 'alloc_j' needs allocator() method
struct alloc_j {
       ^
csabbg_allocatorforward.t.cpp:249:1: note: AL01: Allocator method definition for class alloc_j

  public:
    // PUBLIC ACCESSORS
    bslma::Allocator *allocator() const;

};
^
csabbg_allocatorforward.t.cpp:246:8: warning: AP02: Class 'alloc_j' needs d_allocator_p member
struct alloc_j {
       ^
csabbg_allocatorforward.t.cpp:249:1: note: AP02: Allocator member declaration for class alloc_j

  private:
    // PRIVATE DATA
    bslma::Allocator *d_allocator_p;

};
^
csabbg_allocatorforward.t.cpp:254:8: warning: AL01: Class 'alloc_k' needs allocator() method
struct alloc_k {
       ^
csabbg_allocatorforward.t.cpp:257:1: note: AL01: Allocator method definition for class alloc_k

  public:
    // PUBLIC ACCESSORS
    bslma::Allocator *allocator() const;

};
^
csabbg_allocatorforward.t.cpp:254:8: warning: AP02: Class 'alloc_k' needs d_allocator_p member
struct alloc_k {
       ^
csabbg_allocatorforward.t.cpp:257:1: note: AP02: Allocator member declaration for class alloc_k

  private:
    // PRIVATE DATA
    bslma::Allocator *d_allocator_p;

};
^
csabbg_allocatorforward.t.cpp:266:8: warning: AL01: Class 'alloc_m' needs allocator() method
struct alloc_m {
       ^
csabbg_allocatorforward.t.cpp:269:1: note: AL01: Allocator method definition for class alloc_m

  public:
    // PUBLIC ACCESSORS
    bslma::Allocator *allocator() const;

};
^
csabbg_allocatorforward.t.cpp:266:8: warning: AP02: Class 'alloc_m' needs d_allocator_p member
struct alloc_m {
       ^
csabbg_allocatorforward.t.cpp:269:1: note: AP02: Allocator member declaration for class alloc_m

  private:
    // PRIVATE DATA
    bslma::Allocator *d_allocator_p;

};
^
csabbg_allocatorforward.t.cpp:282:8: warning: AT02: Class 'alloc_o' uses allocators but does not have an allocator trait
struct alloc_o {
       ^
csabbg_allocatorforward.t.cpp:284:1: note: AT02: Allocator trait for class alloc_o

  public:
    // TRAITS
    BSLMF_NESTED_TRAIT_DECLARATION(alloc_o, bslma::UsesBslmaAllocator);

};
^
csabbg_allocatorforward.t.cpp:282:8: warning: AL01: Class 'alloc_o' needs allocator() method
struct alloc_o {
       ^
csabbg_allocatorforward.t.cpp:284:1: note: AL01: Allocator method definition for class alloc_o

  public:
    // PUBLIC ACCESSORS
    bslma::Allocator *allocator() const;

};
^
csabbg_allocatorforward.t.cpp:282:8: warning: AP02: Class 'alloc_o' needs d_allocator_p member
struct alloc_o {
       ^
csabbg_allocatorforward.t.cpp:284:1: note: AP02: Allocator member declaration for class alloc_o

  private:
    // PRIVATE DATA
    bslma::Allocator *d_allocator_p;

};
^
csabbg_allocatorforward.t.cpp:287:8: warning: AT02: Class 'alloc_p' uses allocators but does not have an allocator trait
struct alloc_p {
       ^
csabbg_allocatorforward.t.cpp:289:1: note: AT02: Allocator trait for class alloc_p

  public:
    // TRAITS
    BSLMF_NESTED_TRAIT_DECLARATION(alloc_p, bslma::UsesBslmaAllocator);

};
^
csabbg_allocatorforward.t.cpp:287:8: warning: AL01: Class 'alloc_p' needs allocator() method
struct alloc_p {
       ^
csabbg_allocatorforward.t.cpp:289:1: note: AL01: Allocator method definition for class alloc_p

  public:
    // PUBLIC ACCESSORS
    bslma::Allocator *allocator() const;

};
^
csabbg_allocatorforward.t.cpp:287:8: warning: AP02: Class 'alloc_p' needs d_allocator_p member
struct alloc_p {
       ^
csabbg_allocatorforward.t.cpp:289:1: note: AP02: Allocator member declaration for class alloc_p

  private:
    // PRIVATE DATA
    bslma::Allocator *d_allocator_p;

};
^
csabbg_allocatorforward.t.cpp:177:22: warning: AM01: Allocator argument initializes non-allocator parameter 1 ('na') of type 'struct bde_verify::csabbg::not_alloc' rather than allocator parameter 2
            object o(a);
                     ^
csabbg_allocatorforward.t.cpp:182:17: warning: AR01: Type using allocator is returned by value
                return o;
                ^
csabbg_allocatorforward.t.cpp:184:17: warning: AR01: Type using allocator is returned by value
                return object(o);
                ^
csabbg_allocatorforward.t.cpp:313:29: warning: GA01: Variable with global storage must be initialized with non-default allocator
bde_verify::csabbg::alloc_a a{};
                            ^
csabbg_allocatorforward.t.cpp:314:29: warning: GA01: Variable with global storage must be initialized with non-default allocator
bde_verify::csabbg::alloc_a b{0};
                            ^
csabbg_allocatorforward.t.cpp:315:29: warning: GA01: Variable with global storage must be initialized with non-default allocator
bde_verify::csabbg::alloc_a c[2];
                            ^
csabbg_allocatorforward.t.cpp:316:29: warning: GA01: Variable with global storage must be initialized with non-default allocator
bde_verify::csabbg::alloc_a d[2][2];
                            ^
67 warnings generated.
