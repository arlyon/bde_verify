In file included from csabbg_allocatorforward.t.cpp:3:
./csabbg_allocatorforward.t.hpp:34:15: warning: AT02: Class 'allocatorforward_alloc_used' uses allocators but does not have an allocator trait
        class allocatorforward_alloc_used;
              ^
./csabbg_allocatorforward.t.hpp:12:1: note: AT02: Header needed for allocator trait
#include <bslmf_nestedtraitdeclaration.h>

#ifndef INCLUDED_CSASCM_VERSION
^
./csabbg_allocatorforward.t.hpp:9:1: note: AT02: Header needed for allocator trait
#include <bslma_usesbslmaallocator.h>

#ifndef INCLUDED_BSLMF_INTEGRALCONSTANT
^
./csabbg_allocatorforward.t.hpp:55:1: note: AT02: Allocator trait for class allocatorforward_alloc_used

  public:
    // TRAITS
    BSLMF_NESTED_TRAIT_DECLARATION(allocatorforward_alloc_used, bslma::UsesBslmaAllocator);

};
^
./csabbg_allocatorforward.t.hpp:47:27: warning: AC02: Implicit copy constructor cannot be called with an allocator as the final argument
class bde_verify::csabbg::allocatorforward_alloc_used
                          ^
csabbg_allocatorforward.t.cpp:15:19: warning: AT02: Class 'test' uses allocators but does not have an allocator trait
            class test:
                  ^
csabbg_allocatorforward.t.cpp:29:13: note: AT02: Allocator trait for class test

              public:
                // TRAITS
                BSLMF_NESTED_TRAIT_DECLARATION(test, bslma::UsesBslmaAllocator);
            
            };
            ^
csabbg_allocatorforward.t.cpp:15:19: warning: AC02: Implicit copy constructor cannot be called with an allocator as the final argument
            class test:
                  ^
csabbg_allocatorforward.t.cpp:45:5: warning: MA01: Allocator not passed to base class bde_verify::csabbg::allocatorforward_alloc_used
    allocatorforward_alloc_used(i),
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
csabbg_allocatorforward.t.cpp:46:5: warning: MA02: Allocator not passed to member used0_
    used0_(i),
    ^~~~~~~~~
csabbg_allocatorforward.t.cpp:44:70: warning: MA02: Allocator not passed to member used2_
bde_verify::csabbg::test::test(int i, BloombergLP::bslma::Allocator* alloc):
                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~
csabbg_allocatorforward.t.cpp:70:5: warning: MA02: Allocator not passed to member used0_
    used0_(bde_verify::csabbg::dummy(alloc)),
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
csabbg_allocatorforward.t.cpp:85:20: warning: AT02: Class 'tbase' uses allocators but does not have an allocator trait
            struct tbase
                   ^
csabbg_allocatorforward.t.cpp:92:13: note: AT02: Allocator trait for class tbase

              public:
                // TRAITS
                BSLMF_NESTED_TRAIT_DECLARATION(tbase, bslma::UsesBslmaAllocator);
            
            };
            ^
csabbg_allocatorforward.t.cpp:88:62: warning: MA02: Allocator not passed to member used0_
                explicit tbase(BloombergLP::bslma::Allocator*);
                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
csabbg_allocatorforward.t.cpp:85:20: warning: AC02: Implicit copy constructor cannot be called with an allocator as the final argument
            struct tbase
                   ^
csabbg_allocatorforward.t.cpp:130:24: warning: AT02: Class 'M' uses allocators but does not have an allocator trait
                struct M { M(BloombergLP::bslma::Allocator*) {} };
                       ^
csabbg_allocatorforward.t.cpp:130:65: note: AT02: Allocator trait for class M

                  public:
                    // TRAITS
                    BSLMF_NESTED_TRAIT_DECLARATION(M, bslma::UsesBslmaAllocator);
                
                struct M { M(BloombergLP::bslma::Allocator*) {} };
                                                                ^
csabbg_allocatorforward.t.cpp:132:24: warning: AT02: Class 'S' uses allocators but does not have an allocator trait
                struct S { S(const T*) {} S(const T*, const A&) {} };
                       ^
csabbg_allocatorforward.t.cpp:132:68: note: AT02: Allocator trait for class S

                  public:
                    // TRAITS
                    BSLMF_NESTED_TRAIT_DECLARATION(S, bslma::UsesBslmaAllocator);
                
                struct S { S(const T*) {} S(const T*, const A&) {} };
                                                                   ^
csabbg_allocatorforward.t.cpp:132:24: warning: AC02: Implicit copy constructor cannot be called with an allocator as the final argument
                struct S { S(const T*) {} S(const T*, const A&) {} };
                       ^
csabbg_allocatorforward.t.cpp:136:53: warning: MA02: Allocator not passed to member s
                C(BloombergLP::bslma::Allocator*) : s("") { }
                                                    ^~~~~
csabbg_allocatorforward.t.cpp:134:20: warning: AT02: Class 'C' uses allocators but does not have an allocator trait
            struct C {
                   ^
csabbg_allocatorforward.t.cpp:137:13: note: AT02: Allocator trait for class C

              public:
                // TRAITS
                BSLMF_NESTED_TRAIT_DECLARATION(C, bslma::UsesBslmaAllocator);
            
            };
            ^
csabbg_allocatorforward.t.cpp:148:16: warning: AT02: Class 'not_alloc' uses allocators but does not have an allocator trait
        struct not_alloc {
               ^
csabbg_allocatorforward.t.cpp:150:9: note: AT02: Allocator trait for class not_alloc

          public:
            // TRAITS
            BSLMF_NESTED_TRAIT_DECLARATION(not_alloc, bslma::UsesBslmaAllocator);
        
        };
        ^
csabbg_allocatorforward.t.cpp:148:16: warning: AC02: Implicit copy constructor cannot be called with an allocator as the final argument
        struct not_alloc {
               ^
csabbg_allocatorforward.t.cpp:154:15: warning: MA02: Allocator not passed to member member
            : member(na) { }
              ^~~~~~~~~~
csabbg_allocatorforward.t.cpp:151:16: warning: AC02: Implicit copy constructor cannot be called with an allocator as the final argument
        struct object {
               ^
csabbg_allocatorforward.t.cpp:201:8: warning: AC02: Implicit copy constructor cannot be called with an allocator as the final argument
struct alloc_a {
       ^
csabbg_allocatorforward.t.cpp:215:8: warning: AT02: Class 'alloc_d' uses allocators but does not have an allocator trait
struct alloc_d {
       ^
csabbg_allocatorforward.t.cpp:217:1: note: AT02: Allocator trait for class alloc_d

  public:
    // TRAITS
    BSLMF_NESTED_TRAIT_DECLARATION(alloc_d, bslma::UsesBslmaAllocator);

};
^
csabbg_allocatorforward.t.cpp:282:8: warning: AT02: Class 'alloc_o' uses allocators but does not have an allocator trait
struct alloc_o {
       ^
csabbg_allocatorforward.t.cpp:284:1: note: AT02: Allocator trait for class alloc_o

  public:
    // TRAITS
    BSLMF_NESTED_TRAIT_DECLARATION(alloc_o, bslma::UsesBslmaAllocator);

};
^
csabbg_allocatorforward.t.cpp:287:8: warning: AT02: Class 'alloc_p' uses allocators but does not have an allocator trait
struct alloc_p {
       ^
csabbg_allocatorforward.t.cpp:289:1: note: AT02: Allocator trait for class alloc_p

  public:
    // TRAITS
    BSLMF_NESTED_TRAIT_DECLARATION(alloc_p, bslma::UsesBslmaAllocator);

};
^
csabbg_allocatorforward.t.cpp:177:22: warning: AM01: Allocator argument initializes non-allocator parameter 1 ('na') of type 'struct bde_verify::csabbg::not_alloc' rather than allocator parameter 2
            object o(a);
                     ^
csabbg_allocatorforward.t.cpp:182:17: warning: AR01: Type using allocator is returned by value
                return o;
                ^
csabbg_allocatorforward.t.cpp:184:17: warning: AR01: Type using allocator is returned by value
                return object(o);
                ^
csabbg_allocatorforward.t.cpp:313:29: warning: GA01: Variable with global storage must be initialized with non-default allocator
bde_verify::csabbg::alloc_a a{};
                            ^
csabbg_allocatorforward.t.cpp:314:29: warning: GA01: Variable with global storage must be initialized with non-default allocator
bde_verify::csabbg::alloc_a b{0};
                            ^
csabbg_allocatorforward.t.cpp:315:29: warning: GA01: Variable with global storage must be initialized with non-default allocator
bde_verify::csabbg::alloc_a c[2];
                            ^
csabbg_allocatorforward.t.cpp:316:29: warning: GA01: Variable with global storage must be initialized with non-default allocator
bde_verify::csabbg::alloc_a d[2][2];
                            ^
31 warnings generated.
